/**
* LiberatePDF2 Microservice
* Microservice for LiberatePDF2
*
* The version of the OpenAPI document: 0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package de.debuglevel.liberatepdf2.client.apis

import de.debuglevel.liberatepdf2.client.models.GetConfigurationResponse

import de.debuglevel.liberatepdf2.client.infrastructure.ApiClient
import de.debuglevel.liberatepdf2.client.infrastructure.ClientException
import de.debuglevel.liberatepdf2.client.infrastructure.ClientError
import de.debuglevel.liberatepdf2.client.infrastructure.ServerException
import de.debuglevel.liberatepdf2.client.infrastructure.ServerError
import de.debuglevel.liberatepdf2.client.infrastructure.MultiValueMap
import de.debuglevel.liberatepdf2.client.infrastructure.RequestConfig
import de.debuglevel.liberatepdf2.client.infrastructure.RequestMethod
import de.debuglevel.liberatepdf2.client.infrastructure.ResponseType
import de.debuglevel.liberatepdf2.client.infrastructure.Success
import de.debuglevel.liberatepdf2.client.infrastructure.toMultiValue

class ConfigurationApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("de.debuglevel.liberatepdf2.client.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @return GetConfigurationResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getConfiguration() : GetConfigurationResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/configuration",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<GetConfigurationResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetConfigurationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

}
